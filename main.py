import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = "7679280950:AAFmaBzbxCpDzDn1mkFAXQ49NU95PXXd-Zw"
CHANNEL_USERNAME = "@glebiiiq"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(row_width=1)
main_menu.add(
    InlineKeyboardButton("üß≠ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="positioning"),
    InlineKeyboardButton("üé® –¥–∏–∑–∞–π–Ω", callback_data="design"),
    InlineKeyboardButton("üìö —É—Ä–æ–∫–∏", callback_data="lessons")
)

# –º–µ–Ω—é "–Ω–∞–∑–∞–¥"
back_menu = InlineKeyboardMarkup()
back_menu.add(
    InlineKeyboardButton("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
)

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å
subscribed_users = set()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    is_subscribed = await check_subscription(user_id)

    if not is_subscribed:
        await message.answer("–π–æ—É –±—Ä–æ, —è –Ω–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!! —Ç–∞–∫ –Ω–µ —á–µ—Å—Ç–Ω–æ ü§®\n\n–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–ø–∏—à–∏ /start —Å–Ω–æ–≤–∞.")
        return

    if user_id not in subscribed_users:
        subscribed_users.add(user_id)
        text = "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É—É!! üéâ"
    else:
        text = "–≤—ã–±–∏—Ä–∞–π —á—Ç–æ –Ω—É–∂–Ω–æ:"

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=types.InputFile("welcome.jpg"),
        caption=text,
        reply_markup=main_menu
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    user = callback_query.from_user
    user_id = user.id
    username = user.username or "no_username"
    fullname = user.full_name
    data = callback_query.data

    is_subscribed = await check_subscription(user_id)

    print(f"üîò user: {fullname} (@{username}) | id: {user_id} | clicked: {data} | subscribed: {is_subscribed}")

    if not is_subscribed:
        await callback_query.answer("—Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
        return

    # —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    except:
        pass

    await bot.send_chat_action(user_id, action="upload_photo")

    if data == "positioning":
        if os.path.exists("positioning.jpg"):
            await bot.send_photo(user_id, types.InputFile("positioning.jpg"), caption="üß≠ –≤–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", reply_markup=back_menu)
        else:
            await bot.send_message(user_id, "‚ùå —Ñ–∞–π–ª positioning.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif data == "design":
        if os.path.exists("design.jpg"):
            await bot.send_photo(user_id, types.InputFile("design.jpg"), caption="üé® –≤–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–∏–∑–∞–π–Ω—É", reply_markup=back_menu)
        else:
            await bot.send_message(user_id, "‚ùå —Ñ–∞–π–ª design.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif data == "lessons":
        if os.path.exists("lessons.jpg"):
            await bot.send_photo(user_id, types.InputFile("lessons.jpg"), caption="üìö –≤–æ—Ç —Ç–≤–æ–∏ —É—Ä–æ–∫–∏", reply_markup=back_menu)
        else:
            await bot.send_message(user_id, "‚ùå —Ñ–∞–π–ª lessons.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif data == "back":
        if os.path.exists("welcome.jpg"):
            await bot.send_photo(user_id, types.InputFile("welcome.jpg"), caption="–≤—ã–±–∏—Ä–∞–π —á—Ç–æ –Ω—É–∂–Ω–æ:", reply_markup=main_menu)
        else:
            await bot.send_message(user_id, "‚ùå —Ñ–∞–π–ª welcome.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback_query.answer()

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)